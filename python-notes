

Ch 16 last chapter


CH 6 Strings


CH 5 Loop and iterations
Loop Idioms
Use is and is not  


definite loops

for i in [5,4,3,2,1] :
    print(i)
print('Blastoff!')

friends = ['Joseph','Glenn','Sally']
for friend in friends :
    print('Happy New Year:', friend)
print('Done!')



Continue 
while True:
  line = input('> ')
  if line[0] == '#' :
    continue
  if line == 'done' :
    break
  print(line)
print('Done!')


Breaking out of a loop
while True:
  line = input('> ')
  if line == 'done' :
    break
  print(line)
print('Done!')


n = 5
while n > 0 :
  print(n)
  n = n - 1
print('Blastoff!')
print(n)







CH 4 
FUNCTIONS



Multiple Parameters /Arguments 



Return Values

def greet(lang):
    if lang == 'es':
        return 'Hola'
    elif lang == 'fr':
      return 'Bonjour'
    else:
      return 'Hello'

print (greet('en'),'Glenn')

print (greet('es'),'Sally')

print (greet('fr'),'Michael')




Parameters
def greet(lang):
    if lang == 'es':
        print('Hola')
    elif lang == 'fr':
      print('Bonjour')
    else:
      print('Hello')

greet('en')

greet('es')

greet('fr')




invoke a function 


def thing():
  print ('Hello')
  print('Fun')

thing()
print('Zip')
thing()

x = 5 
print('Hello')

def print_lyrics():
  print("I'm a Lumber Jack and I'm okay")
  print('I sleep all night and I work all day')

print('Yo')
print_lyrics()
x = x + 2
print(x)





CH 3 
TRY EXCEPT

astr = 'Hello Bob'
try: 
  istr = int(astr)
except:
  istr = -1
print('First', istr)

astr = '123'
try:
  istr = int(astr)
except:
  istr = -1
print('Second', istr)



CH 2
 completed


TERMINAL 
pwd
cd
ls - l
export PATH="/path/to/python:$PATH"

** - Power
% - remainder /modulo 
!= not equal 
== is it equal to 


x = 
Parenthesis
Power
Multiplication Division 
Addition 
Left to Right

Guido Van Rossum 

YOUTUBE:
Python for Everybody - Full University Python Course - YouTube

WEBSITE:
2023 Path to Master Programmer (for free) - YouTube

WEB IDE:
codespaces-jupyter [Codespaces] — Visual Studio Code

 Introduction 
 (0:00:00) Why Program? 
 (0:12:21) Why Program? - Hardware Architecture 
 (0:24:24) Python 3 Windows Installation 
 (0:32:34) Python 3 Mac Installation 
 (0:36:41) Why Program? - Python as a Language 
 (0:44:17) Why Program? - What do we say? 

 Basic Concepts  
 (0:56:55) Variables, Expressions, and Statements 
 (1:06:20) Variables, Expressions, and Statements - Expressions 
 (1:26:00) Conditional Execution 
 (1:39:13) Conditional Execution - More Conditional Structures 
 (1:52:48) Functions 
 (2:03:02) Functions - Functions of our own
 (2:15:21) Loops and Iteration 
 (2:25:04) Loops and Iteration - Definite Loops 
 (2:31:40) Loops and Iteration - Loop Idioms 
 (2:40:07) Loops and Iteration - More Loop Patterns 
 (2:58:39) Strings 
 (3:09:06) Strings - More String Operations 
 (3:27:33) Reading Files 
 (3:35:12) Reading Files - Reading Files in Python 
 (3:48:42) Python Lists 
 (3:59:27) Python Lists - Loop Operations 
 (4:08:52) Python Lists - Strings vs. Lists 
 (4:16:42) Python Lists - Strings, Files, 

Lists & the Guardian Pattern 
 (4:28:44) Dictionaries 
 (4:36:32) Dictionaries - Counting 
 (4:45:43) Dictionaries - Counting Words in Text 
 (4:58:21) Dictionaries - Counting Word Frequency Using a Dictionary 
 (5:22:46) Tuples 
 (5:32:18) Tuples - Sorting 
 (5:44:26) Tuples - Sorting a Dictionary Using Tuples 
 (5:54:56) Regular Expressions 
 (6:05:21) Regular Expressions - From Matching to Extracting 
 (6:13:47) Regular Expressions - String Parsing


 Networking 
 (6:22:17) Networked Programs
 (6:29:45) Networked Programs - Application Protocols 
 (6:38:56) Networked Programs - Write a Web Browser 
 (6:43:10) Networked Programs - Code Example: socket1.py 
 (6:48:58) Networked Programs - Characters and Strings 
 (6:59:57) Networked Programs - urllib 
 (7:05:10) Networked Programs - Code Example: urllib1.py, urlwords.py 
 (7:08:25) Networked Programs - Parsing HTML 
 (7:14:48) Networked Programs - Code Example: urllinks.py 


 Web Scraping 
 (7:23:43) Using Web Services 
 (7:26:35) Using Web Services - XML 
 (7:32:02) Using Web Services - Code Example: xml1.py, xml2.py 
 (7:37:40) Using Web Services - XML Schema 
 (7:51:32) Using Web Services - JavaScipt Notation 
 (7:57:45) Using Web Services - Code Example: json1.py, json2.py 
 (8:03:08) Using Web Services - Service Oriented Approach 
 (8:04:44) Using Web Services - Web Services 
 (8:11:33) Using Web Services - Code Example: geojson.py 
 (8:18:49) Using Web Services - API Security & Rate Limiting 
 (8:28:45) Using Web Services - Code Example: twitter1.py, twitter2.py 

 Object-oriented programming (OOP) 
 (8:48:01) ython Objects
 (8:58:28) Python Objects - Sample Code 
 (9:06:50) Python Objects - Object Lifecycle 
 (9:13:19) Python Objects - Inheritance 


 Working with Database
 (9:20:44) Databases 
 (9:35:55) Databases - SQLite Browser 
 (9:45:40) Databases - Code Sample: emaildb.py
 (9:58:55) Databases - Code Sample: twspider.py 
 (10:08:06) Databases - Database Design 
 (10:16:29) Databases - Representing Relationships 
 (10:20:37) Databases - Relationship Building 
 (10:33:05) Databases - Join Operation 
 (10:43:13) Databases - Code Sample: tracks.py 
 (10:57:45) Databases - Many-to-Many Relationships 
 (11:09:37) Databases - Code Sample: roster.py 
 (11:20:40) Databases - Code Sample: twspider.py 


 Data Visualization
 (11:20:40) Data Visualization 
 (11:48:18) Data Visualization - Code Sample: Geodata 
 (12:01:05) Data Visualization - Page Rank 
 (12:12:14) Data Visualization - Code Sample: Pagerank Spidering 
 (12:29:12) Data Visualization - Code Sample: Pagerank Computation 
 (12:44:17) Data Visualization - Code Sample: Pagerank Visualization 
 (12:44:17) Data Visualization - Mailing List Crawl 
 (12:57:08) Data Visualization - Code Sample: Gmane Data Retrieval 
 (13:13:42) Data Visualization - Code Sample: Gmane Data Modeling 
 (13:26:04) Data Visualization - Code Sample: Gmane Data Visualization


NOTES

Visualize the Code 
https://pythontutor.com/visualize.html#mode=display

